
// Basic Express + MongoDB backend
const express = require('express');
        const cors = require('cors');
        const bcrypt = require('bcryptjs');
        const jwt = require('jsonwebtoken');

        const app = express();
        const PORT = process.env.PORT || 5000;

        // Middleware
        app.use(cors());
        app.use(express.json());

        // MongoDB connection
        mongoose.connect('mongodb://localhost:27017/reserve', {
            useNewUrlParser: true,
            useUnifiedTopology: true
        })
        .then(() => console.log('MongoDB connected'))
        .catch(err => console.error('MongoDB connection error:', err));

        // User schema/model
        const userSchema = new mongoose.Schema({
            username: { type: String, required: true, unique: true },
            password: { type: String, required: true },
            email: { type: String, required: true, unique: true },
            createdAt: { type: Date, default: Date.now }
        });
        const User = mongoose.model('User', userSchema);

        // Donation schema/model (linked to user)
        const donationSchema = new mongoose.Schema({
            user: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
            name: String,
            amount: Number,
            message: String,
            date: { type: Date, default: Date.now }
        });
        const Donation = mongoose.model('Donation', donationSchema);

        // JWT secret (in production, use env variable)
        const JWT_SECRET = 'your_jwt_secret_key';

        // Middleware to verify JWT
        function auth(req, res, next) {
            const authHeader = req.headers.authorization;
            if (!authHeader) return res.status(401).json({ error: 'No token provided.' });
            const token = authHeader.split(' ')[1];
            if (!token) return res.status(401).json({ error: 'No token provided.' });
            try {
                const decoded = jwt.verify(token, JWT_SECRET);
                req.userId = decoded.userId;
                next();
            } catch (err) {
                res.status(401).json({ error: 'Invalid token.' });
            }
        }

        // Welcome route for root URL
        app.get('/', (req, res) => {
            res.send('Welcome to the ReServe backend API!');
        });

        // Register route
        app.post('/api/register', async (req, res) => {
            try {
                const { username, password, email } = req.body;
                if (!username || !password || !email) {
                    return res.status(400).json({ error: 'All fields are required.' });
                }
                const existingUser = await User.findOne({ $or: [{ username }, { email }] });
                if (existingUser) {
                    return res.status(400).json({ error: 'Username or email already exists.' });
                }
                const hashedPassword = await bcrypt.hash(password, 10);
                const user = new User({ username, password: hashedPassword, email });
                await user.save();
                res.status(201).json({ message: 'User registered successfully.' });
            } catch (err) {
                res.status(500).json({ error: err.message });
            }
        });

        // Login route
        app.post('/api/login', async (req, res) => {
            try {
                const { username, password } = req.body;
                const user = await User.findOne({ username });
                if (!user) {
                    return res.status(400).json({ error: 'Invalid username or password.' });
                }
                const isMatch = await bcrypt.compare(password, user.password);
                if (!isMatch) {
                    return res.status(400).json({ error: 'Invalid username or password.' });
                }
                const token = jwt.sign({ userId: user._id }, JWT_SECRET, { expiresIn: '1d' });
                res.json({ token, username: user.username });
            } catch (err) {
                res.status(500).json({ error: err.message });
            }
        });

        // Get current user profile with donation count (requires JWT)
        app.get('/api/profile', auth, async (req, res) => {
            try {
                const user = await User.findById(req.userId, 'username email createdAt');
                if (!user) return res.status(404).json({ error: 'User not found' });
                const donationCount = await Donation.countDocuments({ user: req.userId });
                res.json({
                    username: user.username,
                    email: user.email,
                    createdAt: user.createdAt,
                    donationCount
                });
            } catch (err) {
                res.status(500).json({ error: err.message });
            }
        });

        // Update current user profile (requires JWT)
        app.put('/api/profile', auth, async (req, res) => {
            try {
                const { username, email, password } = req.body;
                const update = {};
                if (username) update.username = username;
                if (email) update.email = email;
                if (password) update.password = await bcrypt.hash(password, 10);
                const user = await User.findByIdAndUpdate(req.userId, update, { new: true, fields: 'username email createdAt' });
                if (!user) return res.status(404).json({ error: 'User not found' });
                res.json(user);
            } catch (err) {
                res.status(500).json({ error: err.message });
            }
        });

        // Get all users (admin only, requires JWT)
        app.get('/api/users', auth, async (req, res) => {
            try {
                // In production, check if req.userId is admin before returning all users
                const users = await User.find({}, 'username email createdAt');
                res.json(users);
            } catch (err) {
                res.status(500).json({ error: err.message });
            }
        });

        // Create donation (authenticated)
        app.post('/api/donations', auth, async (req, res) => {
            try {
                const { name, amount, message } = req.body;
                const donation = new Donation({
                    user: req.userId,
                    name,
                    amount,
                    message
                });
                await donation.save();
                res.status(201).json(donation);
            } catch (err) {
                res.status(400).json({ error: err.message });
            }
        });

        // Get all donations (optionally filter by user)
        app.get('/api/donations', async (req, res) => {
            try {
                const { userId } = req.query;
                let donations;
                if (userId) {
                    donations = await Donation.find({ user: userId }).populate('user', 'username email');
                } else {
                    donations = await Donation.find().populate('user', 'username email');
                }
                res.json(donations);
            } catch (err) {
                res.status(500).json({ error: err.message });
            }
        });

        // Get user count
        app.get('/api/users/count', async (req, res) => {
            try {
                const count = await User.countDocuments();
                res.json({ count });
            } catch (err) {
                res.status(500).json({ error: err.message });
            }
        });

        // Get donation count
        app.get('/api/donations/count', async (req, res) => {
            try {
                const count = await Donation.countDocuments();
                res.json({ count });
            } catch (err) {
                res.status(500).json({ error: err.message });
            }
        });

        // Start server
        app.listen(PORT, () => {
            console.log(`Server running on http://localhost:${PORT}`);
        });
    try {
        const { username, password } = req.body;
        const user = await User.findOne({ username });
        if (!user) {
            return res.status(400).json({ error: 'Invalid username or password.' });
        }
        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ error: 'Invalid username or password.' });
        }
        const token = jwt.sign({ userId: user._id }, JWT_SECRET, { expiresIn: '1d' });
        res.json({ token, username: user.username });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// Middleware to verify JWT
function auth(req, res, next) {
    const authHeader = req.headers.authorization;
    if (!authHeader) return res.status(401).json({ error: 'No token provided.' });
    const token = authHeader.split(' ')[1];
    if (!token) return res.status(401).json({ error: 'No token provided.' });
    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        req.userId = decoded.userId;
        next();
    } catch (err) {
        res.status(401).json({ error: 'Invalid token.' });
    }
}


// Welcome route for root URL
app.get('/', (req, res) => {
    res.send('Welcome to the ReServe backend API!');
});


// Create donation (authenticated)
app.post('/api/donations', auth, async (req, res) => {
    try {
        const { name, amount, message } = req.body;
        const donation = new Donation({
            user: req.userId,
            name,
            amount,
            message
        });
        await donation.save();
        res.status(201).json(donation);
    } catch (err) {
        res.status(400).json({ error: err.message });
    }
});

// Get all donations (optionally filter by user)
app.get('/api/donations', async (req, res) => {
    try {
        const { userId } = req.query;
        let donations;
        if (userId) {
            donations = await Donation.find({ user: userId }).populate('user', 'username email');
        } else {
            donations = await Donation.find().populate('user', 'username email');
        }
        res.json(donations);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// Get user count
app.get('/api/users/count', async (req, res) => {
    try {
        const count = await User.countDocuments();
        res.json({ count });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// Get donation count
app.get('/api/donations/count', async (req, res) => {
    try {
        const count = await Donation.countDocuments();
        res.json({ count });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});

// Start server
app.listen(PORT, () => {
    console.log(`Server running on http://localhost:${PORT}`);
});
